diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 8fc3042e..55d5c8ee 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -5657,6 +5657,8 @@ ngx_http_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
                                          |NGX_HTTP_UPSTREAM_MAX_CONNS
                                          |NGX_HTTP_UPSTREAM_MAX_FAILS
                                          |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
+                                         |NGX_HTTP_UPSTREAM_SRUN_ID
+                                         |NGX_HTTP_UPSTREAM_MAX_BUSY
                                          |NGX_HTTP_UPSTREAM_DOWN
                                          |NGX_HTTP_UPSTREAM_BACKUP);
     if (uscf == NULL) {
@@ -5754,9 +5756,9 @@ ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     ngx_http_upstream_srv_conf_t  *uscf = conf;
 
     time_t                       fail_timeout;
-    ngx_str_t                   *value, s;
+    ngx_str_t                   *value, s, id;
     ngx_url_t                    u;
-    ngx_int_t                    weight, max_conns, max_fails;
+    ngx_int_t                    weight, max_conns, max_fails, max_busy;
     ngx_uint_t                   i;
     ngx_http_upstream_server_t  *us;
 
@@ -5772,7 +5774,10 @@ ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     weight = 1;
     max_conns = 0;
     max_fails = 1;
+    max_busy = 0;
     fail_timeout = 10;
+    id.data = (u_char *) "a";
+    id.len = sizeof("a") - 1;
 
     for (i = 2; i < cf->args->nelts; i++) {
 
@@ -5821,6 +5826,21 @@ ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             continue;
         }
 
+        if (ngx_strncmp(value[i].data, "max_busy=", 9) == 0) {
+
+            if (!(uscf->flags & NGX_HTTP_UPSTREAM_MAX_BUSY)) {
+                goto not_supported;
+            }
+
+            max_busy = ngx_atoi(&value[i].data[9], value[i].len - 9);
+
+            if (max_busy == NGX_ERROR) {
+                goto invalid;
+            }
+
+            continue;
+        }
+
         if (ngx_strncmp(value[i].data, "fail_timeout=", 13) == 0) {
 
             if (!(uscf->flags & NGX_HTTP_UPSTREAM_FAIL_TIMEOUT)) {
@@ -5839,6 +5859,22 @@ ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             continue;
         }
 
+        if (ngx_strncmp(value[i].data, "srun_id=", 8) == 0) {
+
+            if (!(uscf->flags & NGX_HTTP_UPSTREAM_SRUN_ID)) {
+                goto not_supported;
+            }
+
+            id.len = value[i].len - 8;
+            id.data = &value[i].data[8];
+
+            if (id.len == 0) {
+                goto invalid;
+            }
+
+            continue;
+        }
+
         if (ngx_strcmp(value[i].data, "backup") == 0) {
 
             if (!(uscf->flags & NGX_HTTP_UPSTREAM_BACKUP)) {
@@ -5884,7 +5920,9 @@ ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     us->weight = weight;
     us->max_conns = max_conns;
     us->max_fails = max_fails;
+    us->max_busy = max_busy;
     us->fail_timeout = fail_timeout;
+    us->srun_id = id;
 
     return NGX_CONF_OK;
 
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index c2f4dc0b..2da166ca 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -101,6 +101,9 @@ typedef struct {
     ngx_msec_t                       slow_start;
     ngx_uint_t                       down;
 
+    ngx_uint_t                       max_busy;
+    ngx_str_t                        srun_id;
+
     unsigned                         backup:1;
 
     NGX_COMPAT_BEGIN(6)
@@ -114,6 +117,8 @@ typedef struct {
 #define NGX_HTTP_UPSTREAM_FAIL_TIMEOUT  0x0008
 #define NGX_HTTP_UPSTREAM_DOWN          0x0010
 #define NGX_HTTP_UPSTREAM_BACKUP        0x0020
+#define NGX_HTTP_UPSTREAM_SRUN_ID       0x0040
+#define NGX_HTTP_UPSTREAM_MAX_BUSY      0x0080
 #define NGX_HTTP_UPSTREAM_MAX_CONNS     0x0100
 
 
